AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for deploying a static website with S3, CloudFront, ACM certificate management, and Route 53 DNS records."

Parameters:
  BucketName:
    Type: String
    Description: Name of the S3 bucket (and domain name). E.g. mysite.com
    MinLength: 1

  GoogleSiteVerificationCode:
    Type: String
    Description: "Optional: Enter the Google Site Verification Code (without 'google-site-verification=' part). Leave blank if not using Google Search Console."
    Default: ""

Resources:
  StaticSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: Private

  # S3 Bucket Policy for CloudFront OAI Access
  StaticSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticSiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub "${StaticSiteBucket.Arn}/*"

  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access S3 via CloudFront

  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref BucketName
      HostedZoneConfig:
        Comment: !Sub "Hosted zone for the domain ${BucketName}"

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "*.${BucketName}"
      DomainValidationOptions:
        - DomainName: !Sub "*.${BucketName}"
          HostedZoneId: !Ref HostedZone
      ValidationMethod: DNS

  # Ensure Astro can serve the site
  CloudFrontFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub "${AWS::StackName}-CF-Function"
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
            var request = event.request;
            var uri = request.uri;

            // Redirect to actual sitemap files if request matches known paths
            if (uri === '/sitemap.xml') {
                return {
                    statusCode: 301,
                    statusDescription: 'Moved Permanently',
                    headers: {
                        'location': { value: '/sitemap-index.xml' }
                    }
                };
            }
            if (uri === '/sitemap_index.xml') {
                return {
                    statusCode: 301,
                    statusDescription: 'Moved Permanently',
                    headers: {
                        'location': { value: '/sitemap-0.xml' }
                    }
                };
            }

            // Append '/index.html' to the URI if it ends with '/' or doesn't contain '.'
            if (uri.endsWith('/')) {
                request.uri += 'index.html';
            } else if (!uri.includes('.')) {
                request.uri += '/index.html';
            }

            return request;
        }
      FunctionConfig:
        Comment: "Basic CloudFront function"
        Runtime: cloudfront-js-2.0

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - StaticSiteBucketPolicy
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: S3Origin
            DomainName: !Sub "${BucketName}.s3.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized Managed Policy
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt CloudFrontFunction.FunctionARN
        DefaultRootObject: index.html
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Aliases:
          - !Ref BucketName
          - !Sub "www.${BucketName}"

  # Route 53 A Record for the Root Domain pointing to CloudFront (IPv4)
  RootARecord:
    Type: AWS::Route53::RecordSet
    DependsOn: CloudFrontDistribution
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref BucketName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # Amazon Default CloudFront Hosted Zone ID

  # Route 53 AAAA Record for the Root Domain pointing to CloudFront (IPv6)
  RootAAAARecord:
    Type: AWS::Route53::RecordSet
    DependsOn: CloudFrontDistribution
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref BucketName
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  # Route 53 A Record for www subdomain pointing to CloudFront (IPv4)
  WWWARecord:
    Type: AWS::Route53::RecordSet
    DependsOn: CloudFrontDistribution
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub "www.${BucketName}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  # Route 53 AAAA Record for www subdomain pointing to CloudFront (IPv6)
  WWWAAAARecord:
    Type: AWS::Route53::RecordSet
    DependsOn: CloudFrontDistribution
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub "www.${BucketName}"
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  # Route 53 TXT Record for Google Site Verification (optional)
  GoogleSiteVerificationTXTRecord:
    Condition: HasGoogleVerification
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref BucketName
      Type: TXT
      TTL: 300
      ResourceRecords:
        - !Sub '"google-site-verification=${GoogleSiteVerificationCode}"'

Conditions:
  HasGoogleVerification:
    Fn::Not:
      - Fn::Equals: [!Ref GoogleSiteVerificationCode, ""]

Outputs:
  CloudFrontDistributionId:
    Description: "CloudFront distribution ID"
    Value: !Ref CloudFrontDistribution

  CloudFrontDomainName:
    Description: "CloudFront distribution domain name"
    Value: !GetAtt CloudFrontDistribution.DomainName

  S3BucketName:
    Description: "S3 bucket name"
    Value: !Ref StaticSiteBucket
