---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import type { Logo } from "../types";

interface Props {
    title: string;
    snippet: string;
    href: string;
    metaimg?: ImageMetadata;
    metaimgAlt?: string;
    logos?: Logo[];
}

const { title, snippet, href, metaimg, metaimgAlt, logos } = Astro.props;
const isRelativeLink = href.startsWith("/") && !href.endsWith(".pdf");
---

<div class="link-card text-lg p-0.5 rounded-lg">
    <a
        href={href}
        target={isRelativeLink ? "_self" : "_blank"}
        class="bg-gray-800 opacity-80 hover:opacity-100 rounded-lg py-6 px-5"
    >
        <h2 class="text-white text-2xl font-bold mb-4 flex justify-between">
            {title}
            <span>&rarr;</span>
        </h2>
        {
            metaimg ? (
                <div class="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-6">
                    <Image
                        class="meta-img w-full md:w-1/2 lg:w-1/3 xl:w-1/4 rounded-lg h-auto object-cover"
                        src={metaimg}
                        alt={metaimgAlt ?? "Meta image"}
                        loading="lazy"
                        decoding="async"
                    />
                    <p>{snippet}</p>
                </div>
            ) : (
                <p>{snippet}</p>
            )
        }
        {
            logos ? (
                <div class="logos flex flex-wrap mt-2 gap-1">
                    {logos.map((logo) => (
                        <Image
                            src={logo.url}
                            alt={logo.alt}
                            loading="lazy"
                            decoding="async"
                        />
                    ))}
                </div>
            ) : null
        }
    </a>
</div>
<style>
    .link-card a {
        color: inherit;
        text-decoration: none;
        background-color: hwb(222 14% 82%);
    }

    /* Hide the "â†—" arrow for external links (see main.css) */
    .link-card > a::after {
        content: "";
    }

    .link-card {
        display: flex;
        background-color: rgb(35, 38, 45);
        background-image: none;
        background-size: 400%;
        background-position: 100%;
        transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
        box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
    }
    .link-card:is(:hover, :focus-within) {
        background-position: 0;
        background-image: linear-gradient(
            45deg,
            rgb(136, 58, 234),
            rgb(224, 204, 250) 30%,
            white 60%
        );
    }
</style>
