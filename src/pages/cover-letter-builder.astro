---
import Layout from "../layouts/Layout.astro";
---

<Layout
  title="AI Cover Letter Optimizer"
  description="Optimize your cover letter for a specific job description."
>
  <div class="max-w-4xl mx-auto">
    <h1 class="text-2xl font-bold mb-4 text-custom-offwhite">AI Cover Letter Optimizer</h1>
    <p class="mb-4 text-custom-gray">
      Paste your cover letter and the job description below to analyze and optimize your cover letter.
    </p>

    <!-- Input Fields -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div>
        <label for="cover-letter" class="block text-sm font-medium text-custom-offwhite">Cover Letter</label>
        <textarea
          id="cover-letter"
          name="cover-letter"
          rows="10"
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-subtle-dark-overlay-lvl-2 text-custom-gray p-2"
        ></textarea>
      </div>
      <div>
        <label for="job-description" class="block text-sm font-medium text-custom-offwhite">Job Description</label>
        <textarea
          id="job-description"
          name="job-description"
          rows="10"
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-subtle-dark-overlay-lvl-2 text-custom-gray p-2"
        ></textarea>
      </div>
    </div>

    <!-- Analyze Button -->
    <div class="mt-4">
      <button id="analyze-button" class="px-4 py-2 bg-blue-500 text-white rounded">Analyze</button>
    </div>

    <!-- Metrics Widgets -->
    <div class="mt-8">
      <h2 class="text-xl font-semibold mb-4 text-custom-offwhite">Metrics</h2>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <!-- Flesch Kincaid Reading Level -->
        <div class="p-4 bg-subtle-dark-overlay-lvl-2 rounded-lg shadow">
          <h3 class="text-lg font-semibold text-custom-offwhite">Overall Flesch-Kincaid Readability</h3>
          <div id="flesch-kincaid" class="mt-2 text-2xl font-bold text-custom-gray">-</div>
          <!-- Personal Pronoun Usage -->
          <div class="mt-4">
            <h4 class="text-md font-medium text-custom-offwhite">Personal Pronouns (Minimize)</h4>
            <div id="pronoun-count" class="mt-1 text-xl font-bold text-custom-gray">-</div>
          </div>
          <!-- First Sentence Evaluation -->
          <div class="mt-4">
            <h4 class="text-md font-medium text-custom-offwhite">First Sentence Evaluation</h4>
            <div id="first-sentence-evaluation" class="mt-1 text-xl font-bold text-custom-gray">-</div>
            <div id="loading-spinner" class="mt-1 text-xl font-bold text-custom-gray hidden">Loading...</div>
          </div>
        </div>
        
        <!-- Top 10 Sentences by Reading Level -->
        <div class="p-4 bg-subtle-dark-overlay-lvl-2 rounded-lg shadow">
          <h3 class="text-lg font-semibold text-custom-offwhite">Top 10 Difficult Sentences (Reading Level)</h3>
          <ol id="top-sentences" class="mt-2 text-custom-gray list-decimal pl-4"></ol>
        </div>
      </div>
    </div>

    <!-- Flesch-Kincaid Score Scale -->
    <div class="mt-8">
      <h2 class="text-xl font-semibold mb-4 text-custom-offwhite">Readability Scale</h2>
      <div class="relative h-4 w-full bg-gray-300 rounded-full overflow-hidden">
        <!-- 5th grade (Very easy) -->
        <div class="absolute left-0 h-full bg-green-400" style="width: 70%;"></div>
        <!-- College (Difficult) -->
        <div class="absolute left-[70%] h-full bg-yellow-400" style="width: 20%;"></div>
        <!-- College Graduate to Professional (Very Difficult) -->
        <div class="absolute left-[90%] h-full bg-red-400" style="width: 10%;"></div>
      </div>
      <div class="flex justify-between text-sm text-custom-gray mt-2">
        <span>90-100 (Very Easy)</span>
        <span>70-89 (Easy)</span>
        <span>50-69 (Plain English)</span>
        <span>30-49 (Difficult)</span>
        <span>0-29 (Very Difficult)</span>
      </div>
    </div>

  <script type="module">
    import { calculateFleschKincaidGradeLevel, getTop10SentencesByReadingLevel } from '/src/scripts/utils/fleschKincaid.js';
    import { countPersonalPronouns, analyzeFirstSentence } from '/src/scripts/utils/metrics.js';
    
    const coverLetterTextarea = document.getElementById('cover-letter');
    const jobDescriptionTextarea = document.getElementById('job-description');
    const analyzeButton = document.getElementById('analyze-button');
    const loadingSpinner = document.getElementById('loading-spinner');
    const firstSentenceEvaluationElement = document.getElementById('first-sentence-evaluation');

    // Add event listener to the "Analyze" button
    analyzeButton.addEventListener('click', updateMetrics);

    async function updateMetrics() {
      const coverLetterText = coverLetterTextarea.value;
      const jobDescriptionText = jobDescriptionTextarea.value;

      // Calculate Flesch Kincaid Reading Level
      const fleschKincaidResult = calculateFleschKincaidGradeLevel(coverLetterText);
      const fleschKincaidElement = document.getElementById('flesch-kincaid');
      fleschKincaidElement.innerHTML = `
        <span class="text-2xl font-bold">${fleschKincaidResult.score.toFixed(1)}</span>
        <br>
        <span class="text-sm">${fleschKincaidResult.description}</span>
      `;

      // Get Top 10 Sentences by Reading Level
      const topSentences = getTop10SentencesByReadingLevel(coverLetterText);

      // Inject the generated <li> elements into the <ol> container
      document.getElementById('top-sentences').innerHTML = topSentences.join('');

      // Calculate Personal Pronoun Usage
      const pronounCount = countPersonalPronouns(coverLetterText);
      const pronounCountElement = document.getElementById('pronoun-count');
      pronounCountElement.innerHTML = `
        <span class="text-2xl font-bold">${pronounCount}</span>
      `;

      // Calculate First Sentence Strength
      if (coverLetterText.trim() && jobDescriptionText.trim()) {
        loadingSpinner.classList.remove('hidden');
        firstSentenceEvaluationElement.classList.add('hidden');
        const firstSentenceEvaluation = await analyzeFirstSentence(coverLetterText, jobDescriptionText);
        loadingSpinner.classList.add('hidden');
        firstSentenceEvaluationElement.classList.remove('hidden');
        firstSentenceEvaluationElement.innerHTML = `
          <span class="text-sm">${firstSentenceEvaluation}</span>
        `;
      }
    }
    
  </script>
  </div>
</Layout>