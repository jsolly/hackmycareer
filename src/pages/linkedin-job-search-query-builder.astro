---
import Layout from "../layouts/Layout.astro";
---

<Layout
  title="LinkedIn Search Query Builder"
  description="Generate a customized LinkedIn search query based on your resume."
>
  <div class="max-w-4xl mx-auto">
    <h1 class="text-2xl font-bold mb-4 text-custom-offwhite">LinkedIn Search Query Builder</h1>
    <p class="mb-4 text-custom-gray">
      Paste your resume below and click "Extract Keywords" to populate the keywords fields. You can modify the keywords, and the search query will update in real-time.
    </p>

    <!-- Resume Input Field -->
    <div class="mb-6">
      <label for="resume" class="block text-sm font-medium text-custom-offwhite">Resume</label>
      <textarea
        id="resume"
        name="resume"
        rows="10"
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-subtle-dark-overlay-lvl-2 text-custom-gray p-2"
      ></textarea>
    </div>

    <!-- Analyze Button -->
    <div class="mt-4">
      <button id="analyze-button" class="px-4 py-2 bg-blue-500 text-white rounded">Extract Keywords</button>
    </div>

    <!-- Loading Spinner -->
    <div id="loading-spinner" class="mt-4 text-xl font-bold text-custom-gray hidden loading-dots">
      Extracting Keywords (This could take ~30 Seconds)<span class="dot">.</span><span class="dot">.</span><span class="dot">.</span>
    </div>

    <!-- Keywords Text Areas (Visible by Default) -->
    <div id="keywords-section" class="mt-6">
      <!-- Include Keywords -->
      <div class="mb-6">
        <label for="include-keywords" class="block text-sm font-medium text-custom-offwhite">Include Keywords (Technologies, Languages, or Job Titles)</label>
        <textarea
          id="include-keywords"
          name="include-keywords"
          rows="5"
            placeholder="E.g. JavaScript, Python, GIS, Spatial Analysis, Remote Sensing, Geospatial Developer, GIS Analyst, Full Stack Developer, Software Engineer, Mapbox, Esri, OpenLayers, Leaflet, PostGIS, ArcGIS, GeoJSON, WebGL, Data Visualization, Machine Learning, AWS, Docker, Kubernetes..."
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-subtle-dark-overlay-lvl-2 text-custom-gray p-2"
        ></textarea>
      </div>

      <!-- Exclude Keywords -->
      <div class="mb-6">
        <label for="exclude-keywords" class="block text-sm font-medium text-custom-offwhite">Exclude Keywords (Technologies, Languages, or Job Titles)</label>
        <textarea
          id="exclude-keywords"
          name="exclude-keywords"
          rows="5"
            placeholder="E.g. COBOL, Fortran, Pascal, Visual Basic, Help Desk, Technical Support, QA Tester, Project Manager, Business Analyst, Sales Representative, Customer Service, Retail..."
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-subtle-dark-overlay-lvl-2 text-custom-gray p-2"
        ></textarea>
      </div>

      <!-- Include Companies -->
      <div class="mb-6">
        <label for="include-companies" class="block text-sm font-medium text-custom-offwhite">Include Companies</label>
        <textarea
          id="include-companies"
          name="include-companies"
          rows="5"
          placeholder="E.g. Esri, Mapbox, CARTO, Hexagon..."
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-subtle-dark-overlay-lvl-2 text-custom-gray p-2"
        ></textarea>
      </div>

      <!-- Exclude Companies -->
       <div class="mb-6">
        <label for="exclude-companies" class="block text-sm font-medium text-custom-offwhite">Exclude Companies</label>
        <textarea
          id="exclude-companies"
          name="exclude-companies"
          rows="5"
          placeholder="E.g. Theranos, Enron, FTX..."
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-subtle-dark-overlay-lvl-2 text-custom-gray p-2"
        ></textarea>
       </div>

    </div>

    <!-- Generated Query (Visible by Default) -->
    <div id="generated-query" class="mt-6">
      <h2 class="text-xl font-semibold mb-2 text-custom-offwhite">Your LinkedIn Search Query:</h2>
      <pre class="bg-gray-800 text-white p-4 rounded overflow-x-auto" id="query-output" style="white-space: pre-wrap; word-wrap: break-word;"></pre>
      <button id="copy-button" class="mt-2 px-4 py-2 bg-green-500 text-white rounded">Copy to Clipboard</button>
      <button id="mix-it-up-button" class="mt-2 px-4 py-2 bg-blue-500 text-white rounded">Mix it Up!</button>
      <button id="reset-button" class="mt-2 px-4 py-2 bg-red-500 text-white rounded">Reset</button>
      <p class="mt-2 text-custom-gray">
        Copy this query and paste it into the LinkedIn search bar to find job listings tailored to your resume, or 
        <a id="linkedin-search-link" href="#" target="_blank">open LinkedIn in a new tab with this search query pre-populated</a>.
      </p>
    </div>

  </div>

  <script type="module">
    import { extractKeywordsFromResumeText } from '/src/scripts/utils/keywordExtractor.js';
    import { generateSearchQuery, generateQueryVariation, generateLinkedInSearchUrl } from '/src/scripts/utils/buildSearchQuery.js';

    const analyzeButton = document.getElementById('analyze-button');
    const resumeTextarea = document.getElementById('resume');
    const includeKeywordsTextarea = document.getElementById('include-keywords');
    const excludeKeywordsTextarea = document.getElementById('exclude-keywords');
    const includeCompaniesTextarea = document.getElementById('include-companies');
    const excludeCompaniesTextarea = document.getElementById('exclude-companies');
    const queryOutput = document.getElementById('query-output');
    const loadingSpinner = document.getElementById('loading-spinner');
    const copyButton = document.getElementById('copy-button');
    const mixItUpButton = document.getElementById('mix-it-up-button');
    const resetButton = document.getElementById('reset-button');
    const linkedinSearchLink = document.getElementById('linkedin-search-link');


    let query = '';

    analyzeButton.addEventListener('click', async () => {
      const resumeText = resumeTextarea.value.trim();

      // Show loading spinner
      loadingSpinner.classList.remove('hidden');

      // Extract keywords
      const includeKeywords = await extractKeywordsFromResumeText(resumeText);
      const excludeKeywords = []; // Initialize excludeKeywords as an empty array

      // Hide loading spinner
      loadingSpinner.classList.add('hidden');

      // Overwrite keywords in textareas
      includeKeywordsTextarea.value = includeKeywords.join(', ');
      excludeKeywordsTextarea.value = excludeKeywords.join(', ');

      // Generate initial query
      query = generateSearchQuery(
        includeKeywordsTextarea.value,
        excludeKeywordsTextarea.value,
        includeCompaniesTextarea.value,
        excludeCompaniesTextarea.value
      );
      queryOutput.textContent = query;
    });

    updateLinkedInSearchLink(query);

    // Real-time query generation as user types
    [includeKeywordsTextarea, excludeKeywordsTextarea, includeCompaniesTextarea, excludeCompaniesTextarea].forEach(textarea => {
      textarea.addEventListener('input', () => {
        query = generateSearchQuery(
          includeKeywordsTextarea.value,
          excludeKeywordsTextarea.value,
          includeCompaniesTextarea.value,
          excludeCompaniesTextarea.value
        );
        queryOutput.textContent = query;
        updateLinkedInSearchLink(query);
      });
    });

    // Copy to Clipboard Functionality
    copyButton.addEventListener('click', () => {
      const queryText = queryOutput.textContent;
      navigator.clipboard.writeText(queryText).then(() => {
      copyButton.textContent = 'Copied!';
      setTimeout(() => {
        copyButton.textContent = 'Copy to Clipboard';
      }, 2000);
      });
    });

    // Mix it Up Functionality
    mixItUpButton.addEventListener('click', () => {
      const mixedQuery = generateQueryVariation(query);
      queryOutput.textContent = mixedQuery;
      updateLinkedInSearchLink(query);
    });

    // Reset Functionality
    resetButton.addEventListener('click', () => {
      queryOutput.textContent = query;
      updateLinkedInSearchLink(query);
    });

    function updateLinkedInSearchLink(query) {
  if (query.trim() === '') {
    linkedinSearchLink.href = '#';
  } else {
    const linkedinSearchUrl = generateLinkedInSearchUrl(query);
    linkedinSearchLink.href = linkedinSearchUrl;
  }
}
  </script>

  <style>
    .loading-dots .dot {
      opacity: 0;
      animation: loading-dots 1s infinite;
    }
    .loading-dots .dot:nth-child(2) {
      animation-delay: 0.2s;
    }
    .loading-dots .dot:nth-child(3) {
      animation-delay: 0.4s;
    }

    @keyframes loading-dots {
      0% {
        opacity: 0;
      }
      50% {
        opacity: 1;
      }
      100% {
        opacity: 0;
      }
    }
  </style>
</Layout>
