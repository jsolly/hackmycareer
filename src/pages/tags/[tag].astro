---
import BaseLayout from "@layouts/BaseLayout.astro";
import BlogPost from "@components/BlogPost.astro";
import type {
    InferGetStaticParamsType,
    InferGetStaticPropsType,
    GetStaticPaths,
} from "astro";

interface Post {
    url: string;
    frontmatter: {
        title: string;
        pubDate: string;
        description: string;
        author: string;
        image: {
            url: string;
            alt: string;
        };
        tags: string[];
    };
}

export const getStaticPaths: GetStaticPaths = async () => {
    const allPosts = await Astro.glob("../posts/*.md");
    const uniqueTags: string[] = [
        ...new Set(allPosts.map((post) => post.frontmatter.tags).flat()),
    ];

    return uniqueTags.map((tag) => {
        const filteredPosts = allPosts.filter((post) =>
            post.frontmatter.tags.includes(tag),
        );
        return {
            params: { tag },
            props: { posts: filteredPosts },
        };
    });
};

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { tag } = Astro.params as Params;
const { posts }: { posts: Post[] } = Astro.props as Props;
---

<BaseLayout pageTitle={tag.toString()}>
    <p>Posts tagged with {tag}</p>
    <ul>
        {
            posts.map((post: Post) => (
                <BlogPost url={post.url} title={post.frontmatter.title} />
            ))
        }
    </ul>
</BaseLayout>
